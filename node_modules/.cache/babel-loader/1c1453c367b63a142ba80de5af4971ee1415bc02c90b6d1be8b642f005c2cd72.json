{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useCallback } from \"react\";\nimport useFetch from \"./useFetch\";\nconst useTranslateLabel = _ref => {\n  _s();\n  let {\n    label = \"\"\n  } = _ref;\n  const [fetchOptions, setFetchOptions] = useState({\n    link: \"QUERY_LABELS\",\n    params: {\n      label: label,\n      p_language: 2,\n      chunk_labels: []\n    }\n  });\n  const [chunkLabels, setChunkLabels] = useState();\n  const {\n    data,\n    runFetch\n  } = useFetch({\n    link: fetchOptions.link,\n    params: fetchOptions.params,\n    fetchOnFirstRun: false\n  });\n  const labels = useCallback(e => {\n    setFetchOptions({\n      link: \"QUERY_CHUNK_LABELS\",\n      params: {\n        p_language: 2,\n        chunk_labels: e.labels\n      }\n    });\n    runFetch();\n    setChunkLabels(data);\n  }, [runFetch]);\n  useEffect(() => {\n    if (label) {\n      runFetch();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [label]);\n  return {\n    tran_label: data[label],\n    chunkLabels,\n    labels\n  };\n};\n_s(useTranslateLabel, \"vi4/WrbIKGfUgAsHDau5xHSEqA8=\", false, function () {\n  return [useFetch];\n});\nexport default useTranslateLabel;","map":{"version":3,"names":["useEffect","useState","useCallback","useFetch","useTranslateLabel","label","fetchOptions","setFetchOptions","link","params","p_language","chunk_labels","chunkLabels","setChunkLabels","data","runFetch","fetchOnFirstRun","labels","e","tran_label"],"sources":["/home/zyad/Documents/ActiveProjects/SalamApp/src/hooks/useTranslateLabel.ts"],"sourcesContent":["import { useEffect, useState, useCallback } from \"react\";\nimport useFetch from \"./useFetch\";\n\ninterface useTranslateLabelProps{\n    label?: string;\n    chunkLabels?: []\n}\n\ninterface FetchOptionsType{\n    link: string;\n    params:{\n        label?: string;\n        p_language: 1 | 2,\n        chunk_labels?: string[]\n    }\n}\n\nconst useTranslateLabel = ({label = \"\"}: useTranslateLabelProps)=>{\n\n    const [fetchOptions, setFetchOptions] = useState<FetchOptionsType>({\n        link: \"QUERY_LABELS\",\n        params: {\n            label: label,\n            p_language: 2,\n            chunk_labels: []\n        }\n    })\n\n    const [chunkLabels, setChunkLabels] = useState()\n\nconst { data, runFetch}  = useFetch({\n    link: fetchOptions.link,\n    params:fetchOptions.params,\n    fetchOnFirstRun: false\n})\n\nconst labels = useCallback((e: any)=>{\n    setFetchOptions({\n        link: \"QUERY_CHUNK_LABELS\",\n        params:{\n            p_language: 2,\n            chunk_labels: e.labels\n        }\n    })\n     runFetch()\n     setChunkLabels(data)\n},[runFetch])\n\nuseEffect(()=>{\n    if(label){\n        runFetch()\n    }\n// eslint-disable-next-line react-hooks/exhaustive-deps\n},[label])\n\nreturn {tran_label: data[label], chunkLabels, labels}\n\n}\n\nexport default useTranslateLabel"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACxD,OAAOC,QAAQ,MAAM,YAAY;AAgBjC,MAAMC,iBAAiB,GAAG,QAAwC;EAAA;EAAA,IAAvC;IAACC,KAAK,GAAG;EAA0B,CAAC;EAE3D,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAmB;IAC/DO,IAAI,EAAE,cAAc;IACpBC,MAAM,EAAE;MACJJ,KAAK,EAAEA,KAAK;MACZK,UAAU,EAAE,CAAC;MACbC,YAAY,EAAE;IAClB;EACJ,CAAC,CAAC;EAEF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,EAAE;EAEpD,MAAM;IAAEa,IAAI;IAAEC;EAAQ,CAAC,GAAIZ,QAAQ,CAAC;IAChCK,IAAI,EAAEF,YAAY,CAACE,IAAI;IACvBC,MAAM,EAACH,YAAY,CAACG,MAAM;IAC1BO,eAAe,EAAE;EACrB,CAAC,CAAC;EAEF,MAAMC,MAAM,GAAGf,WAAW,CAAEgB,CAAM,IAAG;IACjCX,eAAe,CAAC;MACZC,IAAI,EAAE,oBAAoB;MAC1BC,MAAM,EAAC;QACHC,UAAU,EAAE,CAAC;QACbC,YAAY,EAAEO,CAAC,CAACD;MACpB;IACJ,CAAC,CAAC;IACDF,QAAQ,EAAE;IACVF,cAAc,CAACC,IAAI,CAAC;EACzB,CAAC,EAAC,CAACC,QAAQ,CAAC,CAAC;EAEbf,SAAS,CAAC,MAAI;IACV,IAAGK,KAAK,EAAC;MACLU,QAAQ,EAAE;IACd;IACJ;EACA,CAAC,EAAC,CAACV,KAAK,CAAC,CAAC;EAEV,OAAO;IAACc,UAAU,EAAEL,IAAI,CAACT,KAAK,CAAC;IAAEO,WAAW;IAAEK;EAAM,CAAC;AAErD,CAAC;AAAA,GAxCKb,iBAAiB;EAAA,QAaID,QAAQ;AAAA;AA6BnC,eAAeC,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}