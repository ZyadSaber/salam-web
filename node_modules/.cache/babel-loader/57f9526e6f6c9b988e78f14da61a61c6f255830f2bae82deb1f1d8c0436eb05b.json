{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zyad Ahmed\\\\Documents\\\\Active Projects\\\\test\\\\src\\\\Pages\\\\Customers\\\\component.tsx\",\n  _s = $RefreshSig$();\nimport React, { memo, useCallback, useEffect, useState } from 'react';\nimport Header from '../../components/Header/component';\nimport Footer from '../../components/Footer/component';\nimport useCheckUser from '../../hooks/useCheckUser';\nimport './style.css';\nimport useFetch from '../../hooks/useFetch';\nimport ModalView from \"./Partials/ModalView\";\nimport useTableControlsButtons from \"../../components/TableView/hooks/useTableControlsButtons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Customers = () => {\n  _s();\n  //@ts-ignore\n  const {\n    setSelectedRow,\n    onDelete,\n    onSaveAndInsertion,\n    setMode,\n    selectedRow,\n    response,\n    modal,\n    setModal\n  } = useTableControlsButtons(\"customers\");\n  const [search, setSearch] = useState(\"\");\n  const [mainTableData, setMainTableData] = useState([{\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    mobile: \"\",\n    address: \"\"\n  }]);\n  const {\n    hidden\n  } = useCheckUser();\n  const {\n    data\n  } = useFetch(\"customers\");\n  console.log(data);\n  useEffect(() => {\n    setMainTableData(data);\n  }, [data, response]);\n  const handleAdd = useCallback(() => {\n    setMode(\"n\");\n    setModal(true);\n    setSelectedRow({});\n  }, [setMode, setModal, setSelectedRow]);\n  const handleCloseModal = useCallback(() => {\n    setModal(false);\n    setSelectedRow({});\n    setMode(\"\");\n    setMainTableData(data);\n  }, [setModal, setSelectedRow, setMode, data]);\n  const handleEdit = useCallback(() => {\n    setMode(\"u\");\n    setModal(true);\n  }, [setModal, setMode]);\n  const handleSelect = useCallback(selected => () => {\n    setSelectedRow(selected);\n  }, [setSelectedRow]);\n  const handleSearchMethod = useCallback(() => {\n    setMainTableData(data.filter(item => {\n      if (search === \"\") return item;else if (item.name.toLocaleLowerCase().includes(search.toLowerCase())) return item;\n    }));\n  }, [data, search]);\n  const columns = [{\n    title: \"Name\"\n  }, {\n    title: \"Email\"\n  }, {\n    title: \"Phone\"\n  }, {\n    title: \"Mobile\"\n  }, {\n    title: \"Address\"\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"customers\",\n      hidden: hidden,\n      children: /*#__PURE__*/_jsxDEV(ModalView, {\n        visable: modal,\n        onOK: onSaveAndInsertion,\n        onClose: handleCloseModal,\n        setCustomer: setSelectedRow,\n        customer: selectedRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Customers, \"22s3oB7YKB5nakcSX0WqvU01lYo=\", false, function () {\n  return [useTableControlsButtons, useCheckUser, useFetch];\n});\n_c = Customers;\nexport default _c2 = /*#__PURE__*/memo(Customers);\nvar _c, _c2;\n$RefreshReg$(_c, \"Customers\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","memo","useCallback","useEffect","useState","Header","Footer","useCheckUser","useFetch","ModalView","useTableControlsButtons","Customers","setSelectedRow","onDelete","onSaveAndInsertion","setMode","selectedRow","response","modal","setModal","search","setSearch","mainTableData","setMainTableData","name","email","phone","mobile","address","hidden","data","console","log","handleAdd","handleCloseModal","handleEdit","handleSelect","selected","handleSearchMethod","filter","item","toLocaleLowerCase","includes","toLowerCase","columns","title"],"sources":["C:/Users/Zyad Ahmed/Documents/Active Projects/test/src/Pages/Customers/component.tsx"],"sourcesContent":["import React, { memo, useCallback, useEffect, useState } from 'react';\r\nimport Header from '../../components/Header/component';\r\nimport Footer from '../../components/Footer/component';\r\nimport useCheckUser from '../../hooks/useCheckUser';\r\nimport './style.css';\r\nimport useFetch from '../../hooks/useFetch';\r\nimport ModalView from \"./Partials/ModalView\";\r\nimport FormView from \"./Partials/FormView\";\r\nimport Table from \"../../components/TableView/Table\";\r\nimport useTableControlsButtons from \"../../components/TableView/hooks/useTableControlsButtons\"\r\n\r\ninterface customerType {\r\n    id?: number;\r\n    name: string;\r\n    email?: string;\r\n    phone?: string;\r\n    mobile?: string;\r\n    address?: string\r\n}\r\n\r\nconst Customers = () => {\r\n    //@ts-ignore\r\n    const { setSelectedRow, onDelete, onSaveAndInsertion, setMode, selectedRow, response, modal, setModal } = useTableControlsButtons(\"customers\")\r\n    const [search, setSearch] = useState(\"\");\r\n    const [mainTableData, setMainTableData] = useState<customerType[]>([\r\n        {\r\n            name: \"\",\r\n            email: \"\",\r\n            phone: \"\",\r\n            mobile: \"\",\r\n            address: \"\"\r\n        }\r\n    ])\r\n\r\n    const { hidden } = useCheckUser()\r\n    const { data } = useFetch(\"customers\")\r\n    console.log(data)\r\n\r\n    useEffect(() => {\r\n        setMainTableData(data)\r\n    }, [data, response])\r\n\r\n    const handleAdd = useCallback(() => {\r\n        setMode(\"n\")\r\n        setModal(true)\r\n        setSelectedRow({})\r\n    }, [setMode, setModal, setSelectedRow])\r\n\r\n    const handleCloseModal = useCallback(() => {\r\n        setModal(false)\r\n        setSelectedRow({})\r\n        setMode(\"\")\r\n        setMainTableData(data)\r\n    }, [setModal, setSelectedRow, setMode, data])\r\n\r\n    const handleEdit = useCallback(() => {\r\n        setMode(\"u\")\r\n        setModal(true)\r\n    }, [setModal, setMode])\r\n\r\n    const handleSelect = useCallback((selected: customerType) => () => { setSelectedRow(selected) }, [setSelectedRow])\r\n\r\n    const handleSearchMethod = useCallback(() => {\r\n        setMainTableData(data.filter((item: customerType) => {\r\n            if (search === \"\") return item;\r\n            else if (item.name.toLocaleLowerCase().includes(search.toLowerCase())) return item;\r\n        }))\r\n    }, [data, search])\r\n\r\n    const columns = [\r\n        { title: \"Name\" },\r\n        { title: \"Email\" },\r\n        { title: \"Phone\" },\r\n        { title: \"Mobile\" },\r\n        { title: \"Address\" },\r\n    ]\r\n\r\n\r\n    return (<>\r\n        <Header />\r\n\r\n        <div className=\"customers\" hidden={hidden}>\r\n            {/* <Table\r\n                title={\"Customers Data\"}\r\n                columns={columns}\r\n                Form={<FormView\r\n                    setValue={setSearch}\r\n                    onSearch={handleSearchMethod}\r\n                />}\r\n                hideTools={false}\r\n                canEdit={true}\r\n                canAdd={true}\r\n                canDelete={true}\r\n                onAdd={handleAdd}\r\n                onEdit={handleEdit}\r\n                onDelete={onDelete}\r\n            >\r\n                {mainTableData.map((customer: customerType) => {\r\n                    return (\r\n                        <>\r\n                            <td onClick={handleSelect(customer)}>{customer.name}</td>\r\n                            <td onClick={handleSelect(customer)}>{customer.email}</td>\r\n                            <td onClick={handleSelect(customer)}>{customer.phone}</td>\r\n                            <td onClick={handleSelect(customer)}>{customer.mobile}</td>\r\n                            <td onClick={handleSelect(customer)}>{customer.address}</td>\r\n\r\n                        </>\r\n                    )\r\n                })}\r\n            </Table> */}\r\n\r\n            <ModalView\r\n                visable={modal}\r\n                onOK={onSaveAndInsertion}\r\n                onClose={handleCloseModal}\r\n                setCustomer={setSelectedRow}\r\n                customer={selectedRow}\r\n            />\r\n        </div>\r\n        <Footer />\r\n    </>)\r\n\r\n};\r\n\r\nexport default memo(Customers);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}