{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect } from \"react\";\nconst useFormManager = (initialValue, setSelectedRow) => {\n  _s();\n  const [initalValues, setInitalValues] = useState();\n  const [state, setState] = useState({});\n  const onChange = useCallback(change => {\n    //@ts-ignore\n    setSelectedRow({\n      ...initialValue,\n      [change.name]: change.value\n    });\n    setState({\n      ...state,\n      [change.name]: change.value\n    });\n    setInitalValues(initalValues);\n  }, [initalValues, initialValue, setSelectedRow, state]);\n  useEffect(() => {\n    setState(initialValue);\n  }, [initialValue]);\n  const resetState = useCallback(() => {\n    setSelectedRow(initalValues);\n  }, [initalValues, setSelectedRow]);\n  const additionalChange = useCallback(additionalChanges => {\n    additionalChanges.map(PropertyName => {\n      if (PropertyName.value !== NaN || \"\") {\n        console.log(PropertyName);\n        onChange(PropertyName);\n      }\n    });\n  }, [onChange]);\n  return {\n    state,\n    onChange,\n    resetState,\n    additionalChange\n  };\n};\n_s(useFormManager, \"ZdZSpYJxyH8mKPRBrOtbrNN/WPQ=\");\nexport default useFormManager;","map":{"version":3,"names":["useState","useCallback","useEffect","useFormManager","initialValue","setSelectedRow","initalValues","setInitalValues","state","setState","onChange","change","name","value","resetState","additionalChange","additionalChanges","map","PropertyName","NaN","console","log"],"sources":["/home/zyad/Documents/ActiveProjects/SalamApp/src/hooks/useFormManager.ts"],"sourcesContent":["import {useState, useCallback, useEffect} from \"react\";\n\nconst useFormManager = (initialValue?: any, setSelectedRow?: any)=>{\n    const [initalValues, setInitalValues] = useState()\n    const [state, setState] = useState({})\n\n    const onChange = useCallback((change: any)=>{\n        //@ts-ignore\n            setSelectedRow({...initialValue, [change.name]: change.value})\n            setState({...state, [change.name]: change.value})\n            setInitalValues(initalValues)\n    },[initalValues, initialValue, setSelectedRow, state])\n\n    useEffect(()=>{\n        setState(initialValue);\n    },[initialValue])\n\n    const resetState = useCallback(()=>{\n        setSelectedRow(initalValues)\n    },[initalValues, setSelectedRow])\n\n    const additionalChange = useCallback((additionalChanges: any)=>{\n        additionalChanges.map((PropertyName: any)=>{\n            if(PropertyName.value !== NaN || \"\"){\n                console.log(PropertyName)\n                onChange(PropertyName)\n            }\n        })\n    },[onChange])\n\n\n    return{state, onChange, resetState, additionalChange}\n}\n\nexport default useFormManager"],"mappings":";AAAA,SAAQA,QAAQ,EAAEC,WAAW,EAAEC,SAAS,QAAO,OAAO;AAEtD,MAAMC,cAAc,GAAG,CAACC,YAAkB,EAAEC,cAAoB,KAAG;EAAA;EAC/D,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,EAAE;EAClD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEtC,MAAMU,QAAQ,GAAGT,WAAW,CAAEU,MAAW,IAAG;IACxC;IACIN,cAAc,CAAC;MAAC,GAAGD,YAAY;MAAE,CAACO,MAAM,CAACC,IAAI,GAAGD,MAAM,CAACE;IAAK,CAAC,CAAC;IAC9DJ,QAAQ,CAAC;MAAC,GAAGD,KAAK;MAAE,CAACG,MAAM,CAACC,IAAI,GAAGD,MAAM,CAACE;IAAK,CAAC,CAAC;IACjDN,eAAe,CAACD,YAAY,CAAC;EACrC,CAAC,EAAC,CAACA,YAAY,EAAEF,YAAY,EAAEC,cAAc,EAAEG,KAAK,CAAC,CAAC;EAEtDN,SAAS,CAAC,MAAI;IACVO,QAAQ,CAACL,YAAY,CAAC;EAC1B,CAAC,EAAC,CAACA,YAAY,CAAC,CAAC;EAEjB,MAAMU,UAAU,GAAGb,WAAW,CAAC,MAAI;IAC/BI,cAAc,CAACC,YAAY,CAAC;EAChC,CAAC,EAAC,CAACA,YAAY,EAAED,cAAc,CAAC,CAAC;EAEjC,MAAMU,gBAAgB,GAAGd,WAAW,CAAEe,iBAAsB,IAAG;IAC3DA,iBAAiB,CAACC,GAAG,CAAEC,YAAiB,IAAG;MACvC,IAAGA,YAAY,CAACL,KAAK,KAAKM,GAAG,IAAI,EAAE,EAAC;QAChCC,OAAO,CAACC,GAAG,CAACH,YAAY,CAAC;QACzBR,QAAQ,CAACQ,YAAY,CAAC;MAC1B;IACJ,CAAC,CAAC;EACN,CAAC,EAAC,CAACR,QAAQ,CAAC,CAAC;EAGb,OAAM;IAACF,KAAK;IAAEE,QAAQ;IAAEI,UAAU;IAAEC;EAAgB,CAAC;AACzD,CAAC;AAAA,GA9BKZ,cAAc;AAgCpB,eAAeA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}